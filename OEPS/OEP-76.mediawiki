<pre>
  OEP: 76
  Title: DDXF DToken+Oep68 Standard
  Author:
  Type: Standard
  Status: Accepted
  Created: 2020-08-03
</pre>

==Abstract==



==Motivation==


==Specification==

===Methods===

====create_token_template====

<pre>
fn create_token_template(creator: &Address, tt_bs: &[u8]) -> bool
</pre>

this method will store the TokenTemplate to chain.
the TokenTemplate is defined as follow:
```
#[derive(Clone, Encoder, Decoder)]
pub struct TokenTemplate {
    pub data_id: Option<Vec<u8>>,
    pub token_hash: Vec<Vec<u8>>,
    pub endpoint: Vec<u8>,
    pub token_name: Vec<u8>,
    pub token_symbol: Vec<u8>,
}
```

* `data_id` is the ontid of data.
* `token_hash` is bytearray of token_hash
* `endpoint` is the api of the seller,
* `token_name` is oep8 Token name which will be generated by this TokenTemplate
* `token_symbol` is oep8 Token symbol


The parameters are of the following type:

{| class = "wikitable"
! style = "text-align:center;"| Parameter
! Type| Parameter Description
|-
| creator
| Address
| the owner of token template
|-
| tt_bs
| &[u8]
| the serialization result of token template
|}

Event

This method will launch the following events:
["createTokenTemplate", creator, tt_bs, token_template_id]

====update_token_template====

<pre>
fn update_token_template(token_template_id: &[u8], tt_bs: &[u8]) -> bool
</pre>

Update the TokenTemplate on the chain according to the TokenTemplateId


The parameters are of the following type:

{| class = "wikitable"
! style = "text-align:center;"| Parameter
! Type
! Desc
|-
| token_template_id
| &[u8]
| used to mark the only TokenTemplate in the chain
|-
| tt_bs
| &[u8]
| the serialization result of token template
|}

event

["updateTokenTemplate", token_template_id, tt_bs]

=========removeTokenTemplate=======

<pre>
fn remove_token_template(token_template_id: &[u8]) -> bool
</pre>

Delete TokenTemplate based on TokenTemPlateId

{| class = "wikitable"
! style = "text-align:center;"| Parameter
! Type
! Desc
|-
| token_template_id
| &[u8]
| used to mark the only TokenTemplate in the chain
|}


event

["removeTokenTemplate", token_template_id]


====authorizeTokenTemplate====

<pre>
fn authorize_token_template(token_template_id: &[u8], authorized_addr: &[Address]) -> bool
</pre>

TokenTemplate creator authorizes other addresses to generate DTokens based on the TokenTemplateId

{| class = "wikitable"
! style = "text-align:center;"| Parameter
! Type
! Desc
|-
| token_template_id
| &[u8]
| used to mark the only TokenTemplate in the chain
|-
| authorized_addr
| &[Address]
| Authorized address
|}


event

["authorizeTokenTemplate", token_template_id, authorized_addr]



====removeAuthorizeAddr====

<pre>
fn remove_authorize_addr(token_template_id: &[u8], authorized_addr: &[Address]) -> bool
</pre>

Delete the specified authorized address according to TokenTemplateId


{| class = "wikitable"
! style = "text-align:center;"| Parameter
! Type
! Desc
|-
| token_template_id
| &[u8]
| used to mark the only TokenTemplate in the chain
|-
| authorized_addr
| &[Address]
| Authorized address
|}

event

["removeAuthorizeAddr", token_template_id, authorized_addr]

====generateDToken====

<pre>
fn generate_dtoken(acc: &Address, token_template_id: &[u8], n: U128) -> bool
</pre>

The authorized address generates DToken according to the TokenTemplateId, and records the DToken in the input parameter acc.

{| class = "wikitable"
! style = "text-align:center;"| Parameter
! Type
! Desc
|-
| acc
| &Address
| authorized address or creator address
|-
| token_template_id
| &[u8]
| used to mark the only TokenTemplate in the chain
|-
| n
| U128
| Number of DTokens generated
|}

event

["generateDToken", acc, acc, token_template_id,n, token_id]

====useToken====

<pre>
fn use_token(account: &Address, token_id: &[u8], n: U128) -> bool
</pre>

the buyer of the token has the right to consume the token


{| class = "wikitable"
! style = "text-align:center;"| Parameter
! Type
! Desc
|-
| account
| &Address
| buyer address
|-
| token_id
| &[u8]
| the number of purchases
|-
| n
| U128
| represents the number of consuming token
|}

event

["useToken", account, token_id, n]


====deleteToken====

<pre>
fn delete_token(account: &Address, token_id: &[u8]) -> bool
</pre>

The Tokentemplate creator can invoke this method to delete token.

{| class = "wikitable"
! style = "text-align:center;"| Parameter
! Type
! Desc
|-
| account
| &Address
| buyer address
|-
| token_id
| &[u8]
| token id
|}

event

["deleteToken", account, token_id]



For methods related to the oep8 standard, please refer to
[Oep68](https://github.com/ontio/OEPs/blob/master/OEPS/OEP-68.mediawiki)


===Implementation===
