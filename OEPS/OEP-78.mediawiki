<pre>
  OEP: 71
  Title: DDXF SplitPolicy Standard
  Author:
  Type: Standard
  Status: Accepted
  Created: 2018-07-03
</pre>

==Abstract==


The contract is used to determine the profit distribution strategy of multiple owners of goods


==Motivation==

There may be multiple owners of goods on the chain, and each owner's share of profit distribution is different. The specific allocation can be set in this contract

==Specification==

===Methods===

====register====

<pre>
pub fn register(key: &[u8], param_bytes: &[u8]) -> bool
</pre>

register the dividend distribution strategy on the chain

the RegisterParam is defined as follow:
```
#[derive(Encoder, Decoder)]
pub struct RegisterParam {
    addr_amt: Vec<AddrAmt>,  //Address and share for agreed profit distribution
    token_type: TokenType,   //The currency used for the agreed fee. Ont, ong and oep4 are currently supported
    contract_addr: Option<Address>,//If it is an oep4 token, the address where the oep4 contract needs to be executed
}
#[derive(Encoder, Decoder, Clone)]
pub struct AddrAmt {
    to: Address,
    weight: u32,
    has_withdraw: bool,
}
```


The parameters are of the following type:

{| class = "wikitable"
! style = "text-align:center;"| Parameter
! Type| Parameter Description
|-
| key
| &[u8]
| key is also called resource_id in the other contract, used to mark the uniqueness of dividend strategy
|-
| param_bytes
| &[u8]
| the serialization result of FeeSplitModel
|}

Event

This method will launch the following events:
["register", key, param_bytes]


====getRegisterParam====

<pre>
pub fn get_register_param(key: &[u8]) -> RegisterParam
</pre>

query RegisterParam by key

The parameters are of the following type:

{| class = "wikitable"
! style = "text-align:center;"| Parameter
! Type| Parameter Description
|-
| key
| &[u8]
| key is also called resource_id in the other contract, used to mark the uniqueness of dividend strategy
|}


====transfer====

<pre>
pub fn transfer(from: &Address, key: &[u8], amt: U128) -> bool
</pre>

Transfer token assets to current contract address

The parameters are of the following type:

{| class = "wikitable"
! style = "text-align:center;"| Parameter
! Type
! Desc
|-
| from
| &Address
| buyer address
|-
| key
| &[u8]
| Commodity ID
|-
| amt
| U128
| Fees paid by the buyer
|}

event

["transfer", from, key, amt]

=========getBalance=======

<pre>
pub fn get_balance(key: &[u8]) -> U128
</pre>

Query balance by commodity ID

{| class = "wikitable"
! style = "text-align:center;"| Parameter
! Type
! Desc
|-
| key
| &[u8]
| commodity ID
|}


====withdraw====

<pre>
pub fn withdraw(key: &[u8], addr: &Address) -> bool
</pre>

the data owner withdraw token from the contract.

{| class = "wikitable"
! style = "text-align:center;"| Parameter
! Type
! Desc
|-
| key
| &[u8]
| commodity ID
|-
| addr
| &Address
| the address who withdraw token, need the address signature
|}


event

["withdraw", key, addr]



====transferWithdraw====

<pre>
pub fn transfer_withdraw(from: &Address, key: &[u8], amt: U128) -> bool
</pre>

Delete the specified authorized address according to TokenTemplateId


{| class = "wikitable"
! style = "text-align:center;"| Parameter
! Type
! Desc
|-
| from
| &Address
| buyer address
|-
| key
| &[u8]
| commodity ID
|-
| amt
| U128
| Fees paid by the buyer
|}

event

["transferWithdraw", from, key, amt]


===Implementation===

[oep-69](https://github.com/ont-bizsuite/ddxf-contract-suite/tree/master/contracts/split_policy)