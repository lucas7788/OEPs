<pre>
  OEP: 64
  Title: Governance Change Standard
  Author:
  Type: Standard
  Status: Accepted
  Created: 2018-07-03
</pre>

==Abstract==

The OEP-64 proposal is a standard interface for the '''Governance Change Standard'''. There are three parties involved in the contract- '''SuperAdmin''', '''Admin''' and the '''Users'''.
SuperAdmin has the authority to assign administrator privileges.
Admin has the right to create topics and set the users who can vote for a topic.
Users are topic voters from the Mortgage node address.


==Motivation==

'''Governance Change Standard''' interace allows the community to update the governace strategy of Ontology blockchain in order to adapt to new developments.

==Specification==

===Methods===

====init====

<pre>
def init()
</pre>

'''SuperAdmin''' can invoke this method to initialize the contract.

====setAdmin====

<pre>
def setAdmin(admins)
</pre>

'''SuperAdmin''' can invoke this method to assign admin privileges. The admin can then invoke the <code>createTopic</code>method to create a new topic.
The parameter <code>admins</code> should be an array that contains 20-byte addresses.

====listAdmins====

<pre>
def listAdmins()
</pre>

Returns the address array that contains all the admins.

====createTopic====

<pre>
def createTopic(admin, topic, startTime, endTime, voters)
</pre>

An admin can invoke this method to create a new topic.
The parameters are of the following type:

{| class = "wikitable"
! style = "text-align:center;"| Parameter
! Type
|-
| admin
| 20 byte address
|-
| topic
| string
|-
| startTime
| UNIX timestamp
|-
| endTime
| UNIX timestamp
|-
| voters
| all voter and voter weight of the Topic,it is array of voter and voter weight.
|}

====setVoterForTopic====

<pre>
def setVoterForTopic(hash, voters)
</pre>

A topic creator can invoke this method.
The <code>hash</code> parameter should be a 32-byte hash value of the topic.
The <code>voters</code> parameter should be an address and weight array, for example: <code>[['AbtTQJYKfQxq4UdygDsbLVjE8uRrJ2H3tP',100000], ['AbtTQJYKfQxq4UdygDsbLVjE8uRrJ2H3tP',100000]]</code>

====listTopics====

<pre>
def listTopics()
</pre>

Returns all the topic hashes.

====getTopic====

<pre>
def getTopic(hash)

</pre>

Returns the corresponding [topicTitle,TopicDetail], for example, ['Update the Governance Strategy, mortgage unlocking cycle changed from 2 months to 1 month','Update the Governance Strategy, mortgage unlocking cycle changed from 2 months to 1 month'].
The parameter <code>hash</code> should be a 32-byte hash that corresponds to a topic.

====getTopicInfo====

<pre>
def getTopicInfo(hash)
</pre>

Return the <code>topicInfo</code> which includes 'admin, topicTitle, topicDetail, voter address, startTime, endTime, approve amount, reject amount, status, topicHash'.
The parameter <code>hash</code> should be the topic 32-byte hash

return value

* admin Topic的创建者
* topic_title Topic标题
* topic_detail Topic详细描述信息
* voter address 所有的被授权投票的地址和权重的数组，例如：[['AbtTQJYKfQxq4UdygDsbLVjE8uRrJ2H3tP',100000],['Ac9JHT6gFh6zxpfv4Q7ZPLD4xLhzcpRTWt',100000]]
* startTime 该Topic投票开始时间
* endTime， 该Topic投票结束时间
* approve amount， 该Topic赞成者的总量，是赞成者权重的累加
* reject amount， 该Topic反对者的总量，是反对者权重的累加
* status， 该Topic的状态，0表示已取消，1表示正常
* topic hash


====getVoters====

<pre>
def getVoters(hash)
</pre>

Return all the voters of a topic, each voter record consists of voter address and voter weight.

====voteTopic====

<pre>
def voteTopic(hash, voter, approveOrReject)
</pre>

Voters can invoke this method to approve or reject a topic.

The parameter <code>hash</code> is the topic hash.
The parameter <code>voter</code> is one of the voters set by an admin.
The parameter <code>approveOrReject</code> is a boolean value, true implies approve, false implies reject.


====getVotedInfo====

<pre>
def getVotedInfo(hash, voter)
</pre>

Voters can invoke this method to query own voted Info, approve or reject.

The parameter <code>hash</code> is the topic hash.
The parameter <code>voter</code> is one of the voters set by an admin.

return value is 1 or 2, 1 means approve, 2 means reject, other means not voted

====getVotedAddress====

<pre>
def getVotedAddress(hash)
</pre>

all users can invoke this method to query all voted address and vote result of a topic.
The parameter <code>hash</code> is the topic hash.

return value is array of all the address and vote result.

====getTopicInfoListByAdmin====

<pre>
def getTopicInfoListByAdmin(admin)
</pre>

all users can invoke this method to query all topicInfo of a admin.
The parameter <code>hash</code> is the topic hash.

return value is array of topicInfo.


===Events===

====createTopic====

<pre>
CreateTopicEvent = RegisterAction("createTopic", "hash", "topic")
</pre>

The event must be triggered when topic are created.

====VoteTopicEvent====

<pre>
VoteTopicEvent = RegisterAction("voteTopic", "hash", "voter")
</pre>

The event must be triggered on any successful calls to <code>voteTopic</code>.

===Implementation===